#!/usr/bin/env python3
import parser.lex as lex

lex.rules = [
	{'regex': '_(T|F)', 'action': 'BOOL', 'dfa': {'startState': 0, 'sigma': ['_', 'T', 'F'], 'finStates': [2, 3], 'deltaT': [[1, None, None], [None, 2, 3], [None, None, None], [None, None, None]]}},
	{'regex': '_A', 'action': 'FORALL', 'dfa': {'startState': 0, 'sigma': ['_', 'A'], 'finStates': [2], 'deltaT': [[1, None], [None, 2], [None, None]]}},
	{'regex': '_E', 'action': 'EXISTS', 'dfa': {'startState': 0, 'sigma': ['_', 'E'], 'finStates': [2], 'deltaT': [[1, None], [None, 2], [None, None]]}},
	{'regex': '\\(', 'action': 'LPAREN', 'dfa': {'startState': 0, 'sigma': ['('], 'finStates': [1], 'deltaT': [[1], [None]]}},
	{'regex': '\\)', 'action': 'RPAREN', 'dfa': {'startState': 0, 'sigma': [')'], 'finStates': [1], 'deltaT': [[1], [None]]}},
	{'regex': '[a-zA-Z]', 'action': 'PROP', 'dfa': {'startState': 0, 'sigma': ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'], 'finStates': [1], 'deltaT': [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]]}},
	{'regex': '&', 'action': 'AND', 'dfa': {'startState': 0, 'sigma': ['&'], 'finStates': [1], 'deltaT': [[1], [None]]}},
	{'regex': '\\|', 'action': 'OR', 'dfa': {'startState': 0, 'sigma': ['|'], 'finStates': [1], 'deltaT': [[1], [None]]}},
	{'regex': '\\^', 'action': 'XOR', 'dfa': {'startState': 0, 'sigma': ['^'], 'finStates': [1], 'deltaT': [[1], [None]]}},
	{'regex': '~', 'action': 'NOT', 'dfa': {'startState': 0, 'sigma': ['~'], 'finStates': [1], 'deltaT': [[1], [None]]}},
	{'regex': '\\->', 'action': 'IF', 'dfa': {'startState': 0, 'sigma': ['-', '>'], 'finStates': [2], 'deltaT': [[1, None], [None, 2], [None, None]]}},
	{'regex': '<\\->', 'action': 'IFF', 'dfa': {'startState': 0, 'sigma': ['<', '-', '>'], 'finStates': [3], 'deltaT': [[1, None, None], [None, 2, None], [None, None, 3], [None, None, None]]}},
	{'regex': '\\_|\\t', 'action': '(SKIP)', 'dfa': {'startState': 0, 'sigma': [' ', '\t'], 'finStates': [1, 2], 'deltaT': [[1, 2], [None, None], [None, None]]}},
	{'regex': '.', 'action': '(ERR) "Bad input"', 'dfa': {'startState': 0, 'sigma': ['\t', '~', '}', '|', '{', 'z', 'y', 'x', 'w', 'v', 'u', 't', 's', 'r', 'q', 'p', 'o', 'n', 'm', 'l', 'k', 'j', 'i', 'h', 'g', 'f', 'e', 'd', 'c', 'b', 'a', '`', '_', '^', ']', '\\', '[', 'Z', 'Y', 'X', 'W', 'V', 'U', 'T', 'S', 'R', 'Q', 'P', 'O', 'N', 'M', 'L', 'K', 'J', 'I', 'H', 'G', 'F', 'E', 'D', 'C', 'B', 'A', '@', '?', '>', '=', '<', ';', ':', '9', '8', '7', '6', '5', '4', '3', '2', '1', '0', '/', '.', '-', ',', '+', '*', ')', '(', "'", '&', '%', '$', '#', '"', '!', ' '], 'finStates': [1], 'deltaT': [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]]}},
]
